#!/usr/bin/perl
use diagnostics;
use strict;
use warnings;
use Redis::Client;
my $client = Redis::Client->new( host => 'localhost', port => 6379 );

$client->del('iphashes');

#my $nas = '192.168.1.2';
my $nas=`/etc/scripts/inputIP`;
chomp($nas);

my $oid         = ".1.3.6.1.4.1.14179.2.1.4.1";
my @snmpIPinfo  = `/usr/bin/snmpwalk -v 2c -c public $nas $oid`;

my @MACslist = grep{/(3.6.1.4.1.14179.2.1.4.1.1\.)/} @snmpIPinfo;
#my @MACs = `echo '@MAC' | cut -d ':' -f2`;
my @MACDeclist;

my $plimit = scalar(@MACslist);

for (my $p =0 ; $p < $plimit ; $p++)
{
        $MACDeclist[$p] = substr("$MAClist[$p]",30);
}


foreach $value(@MACDeclist){

my $IPlist[$i] = grep{/(3.6.1.4.1.14179.2.1.4.1.2.$value)/} @snmpIPinfo;




#my @IPlist = grep{/(3.6.1.4.1.14179.2.1.4.1.2\.)/} @snmpIPinfo;
#my @IPs = `echo '@IP' | cut -d ':' -f2`;

#my @usernameslist = grep{/(3.6.1.4.1.14179.2.1.4.1.3\.)/} @snmpIPinfo;
#my @usernames = `echo '@username' | cut -d '"' -f2`;





#my @ssidslist = grep{/(3.6.1.4.1.14179.2.1.4.1.7\.)/} @snmpIPinfo;
#my @ssids = `echo '@ssid' | cut -d '"' -f2`;

#my @APMacslist = grep{/(3.6.1.4.1.14179.2.1.4.1.4\.)/} @snmpIPinfo;
#my @APMacs = `echo '@APMac' | cut -d ':' -f2`;
}

my $APName = ".1.3.6.1.4.1.14179.2.2.1.1.3"; #bsnAPName
my @APNames = `/usr/bin/snmpwalk -v 2c -c public $nas $APName |cut -d '"' -f2 `;

my $APDot3MacAddress = ".1.3.6.1.4.1.14179.2.2.1.1.1"; # bsnAPDot3MacAddress
my @APDot3Macs = `/usr/bin/snmpwalk -v 2c -c public $nas $APDot3MacAddress |cut -d ':' -f2 `;

my $limitt = scalar(@IPlist);
my @IPs;
my @usernames;
my @MACs;
my @ssids;
my @APMacs;

for (my $i=0;$i<$limitt;$i=$i+1){

	my @IPsplitted = split /:/, $IPlist[$i];
	push(@IPs,$IPsplitted[1]);

	my @usernamessplitted = split /"/, $usernameslist[$i];
	push(@usernames,$usernamessplitted[1]);

	my @MACssplitted = split /:/, $MACslist[$i];
	push(@MACs,$MACssplitted[1]);	
        
	my @ssidssplitted = split /"/, $ssidslist[$i];
	push(@ssids,$ssidssplitted[1]);

	my @APMacssplitted = split /:/, $APMacslist[$i];
	push (@APMacs,$APMacssplitted[1]); 

	#$usernames[$i] = substr($usernames[$i], index($usernames[$i], '"'));
        #$usernames[$i] = substr($usernames[$i], 1);
        #$MACs[$i] = substr($MACs[$i], index($MACs[$i], ":"));
        #$MACs[$i] = substr($MACs[$i], 2);

	#$ssids[$i] = substr($ssids[$i], index($ssids[$i], '"'));
        #$ssids[$i] = substr($ssids[$i], 1);
        #$APMacs[$i] = substr($APMacs[$i], index($APMacs[$i], ":"));
        #$APMacs[$i] = substr($APMacs[$i], 2);
}


my $end = scalar(@APNames);

my %hashAP;
for(my $j=0;$j< $end; $j++){
	chomp($APDot3Macs[$j]);
	chomp($APNames[$j]);
	$hashAP{$APDot3Macs[$j]} = "$APNames[$j]";
}


my $limit = scalar(@IPs);
my $values;
my $nameAP; 

for(my $i=0 ; $i < $limit ; $i++) {


	if ($IPs[$i]  ne "") {
		chomp($IPs[$i]);}
	if ($usernames[$i] ne ""){
		chomp($usernames[$i]);}
	if ($MACs[$i] ne ""){
		chomp($MACs[$i]);}
	if ($ssids[$i] ne ""){
		chomp($ssids[$i]);}
	if($APMacs[$i] ne ""){
		chomp($APMacs[$i]);
	$nameAP =$hashAP{$APMacs[$i]};
	chomp($nameAP);
	}

	$values ="$IPs[$i],$usernames[$i],$MACs[$i],$ssids[$i],$APMacs[$i],$nameAP";
	$client->hset('iphashes', $IPs[$i] => $values);
}


